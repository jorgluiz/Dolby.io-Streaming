<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Visualizador Millicast</title>
  <script src="https://cdn.jsdelivr.net/npm/@millicast/sdk/dist/millicast.umd.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
      background-color: #f0f0f0;
    }

    h1 {
      color: #333;
    }

    video {
      border: 1px solid #ddd;
      background-color: #000;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .controls {
      margin-bottom: 10px;
    }

    input {
      margin: 5px;
      padding: 10px;
      font-size: 16px;
    }

    button {
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>

<body>
  <h1>Visualizador Millicast</h1>
  <div class="container">
    <div class="controls">
    </div>
    <video id="video" width="600" height="400" controls></video>
  </div>

  <script>
    (async () => {
      // Obtém a URL atual da página
      const urlParams = new URLSearchParams(window.location.search);

      // Recupera o valor de 'streamId' da URL
      const streamId = urlParams.get('streamId');

      // Divide o streamId para obter os valores separados
      const [accountId, streamName] = streamId.split('/');

      // Callback to generate a subscriber token with credentials
      const tokenGenerator = () => millicast.Director.getSubscriber({
        streamName: streamName,
        streamAccountId: accountId
      });

      // Cria uma nova instância do Millicast View
      const millicastView = new window.millicast.View(streamName, tokenGenerator);

      // Adiciona um ouvinte para quando um novo track chegar
      millicastView.on('track', (event) => {
        const video = document.getElementById('video');
        video.srcObject = event.streams[0];
        console.log('Stream has started.');
        // Aqui, você pode garantir que o autoplay funcione definindo o vídeo como sem som inicialmente
        video.muted = false;  // Certifique-se de que o vídeo está sem som
        video.hidden = false;
        video.play(); // Inicia a reprodução
      });

      try {
        await millicastView.connect();
      } catch (e) {
        if (!millicastView.isActive()) {
          console.log('Stream is not live, the broadcast will begin soon.');
        }

        console.log('Connection failed:', e);
        millicastView.reconnect();
      }
    })()
  </script>
</body>

</html>