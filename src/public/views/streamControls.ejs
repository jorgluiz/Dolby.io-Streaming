<!DOCTYPE html>
<html>
<style>
  video {
    width: 600px;
    height: 400px
  }
</style>

<head>
  <title>Dolby.io Real-time Streaming Token API Tutorial - Publisher</title>
  <script src="https://cdn.jsdelivr.net/npm/@millicast/sdk@latest/dist/millicast.umd.js"></script>
</head>

<body>
  <div>
    <label for="streamName">Stream Name</label>
    <input id="streamName" type="text" value="" />
    <button onclick="createToken()">Create Token</button>
    <button onclick="stopLive()">stop live</button>
    <button onclick="obtertoken()">OBTERTOKEN</button>
    <!-- <a id="shareLink" class="links-live" href="http://localhost:8080/live-player" target="_blank">compartilhe linklive</a> -->
    <a id="viewer-url" href=""></a>
  </div>

  <script>
    const accountId = "p9TPVt";
    let millicastPublish;  // Declare millicastPublish in a higher scope

    const obtertoken = () => {
      fetch('/get-token-name', {
        headers: {
          "Content-Type": "application/json",
        }
      }).then(response => console.log(response)).catch(error => console.log(error))
    }

    async function createToken() {
      const streamName = document.getElementById("streamName").value;
      if (!streamName) return;

      try {
        const fetchResponse = await fetch("/millicast/createToken", {
          method: "POST",
          body: JSON.stringify({ streamName }),
          headers: { "Content-Type": "application/json" },
        });

        const response = await fetchResponse.json();
        // Armazena o labelName no localStorage e atualiza o link de compartilhamento
        localStorage.setItem('labelName', response.data.label);

        // Set up and start publishing
        const yourPublishingToken = response.data.token;
        const yourStreamName = response.data.label;

        const startPublishing = async () => {
          try {
            const tokenGenerator = () => millicast.Director.getPublisher({
              token: yourPublishingToken,
              streamName: yourStreamName
            });

            millicastPublish = new millicast.Publish(yourStreamName, tokenGenerator);
            const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });

            const localVideo = document.createElement('video');
            localVideo.srcObject = mediaStream;
            localVideo.controls = true;
            localVideo.autoplay = true;
            document.body.appendChild(localVideo);

            await millicastPublish.connect({ mediaStream });
            // Example to playback with the hosted viewer
            const viewerUrl = `https://dolbyio-streaming-272abf7507d6.herokuapp.com/live-player?streamId=${accountId}/${yourStreamName}`;
            document.getElementById('viewer-url').innerHTML = `<a href="${viewerUrl}" target="_new">link compartilhar live</a>`;
            console.log('Transmissão iniciada com sucesso');
          } catch (error) {
            console.error('Erro ao iniciar a transmissão:', error);
          }
        };
        startPublishing();

      } catch (error) {
        console.error('Erro ao criar o token:', error);
        alert('Connection failed: ' + error.message);
      }
    }

    // Stop the live stream
    const stopLive = () => {
      if (millicastPublish) {
        millicastPublish.stop();  // Stop the live stream
        console.log('Transmissão encerrada');
        location.reload();  // Optionally reload the page
      } else {
        console.log('Nenhuma transmissão ativa para parar');
      }
    };

    // Chama a função ao carregar a página para definir o link, caso o token já esteja armazenado
    atualizarLinkComToken();
  </script>
</body>

</html>


<!-- <!DOCTYPE html>
<html>
<head>
    <title>Dolby.io Real-time Streaming Token API Tutorial - Publisher</title>
    <script src="https://cdn.jsdelivr.net/npm/@millicast/sdk@latest/dist/millicast.umd.js"></script>
</head>
<body>
    <label for="streamName">Stream Name</label>
    <input id="streamName" type="text" value="" />
    <button onclick="stopLive()">stop live</button>
    <button onclick="createToken()">Create Token</button>
    <button onclick="obtertoken()">OBTERTOKEN</button>
    <a class="links-live" href="http://localhost:8080/live-player" target="_blank">compartilhe link live</a>
    <script>
          // Função para adicionar o valor do token ao link de compartilhamento
          function atualizarLinkComToken() {
            const token = localStorage.getItem('labelName');
            console.log(token, "token")
            const link = document.getElementById('shareLink');
            
            // Verifica se o token existe e atualiza o link
            if (token) {
                link.href = `http://localhost:8080/live-player/${token}`;
            }
        }

        // Chamando a função ao carregar a página ou após o token ser definido
        atualizarLinkComToken();

        const stopLive = () => {
            fetch('/stop-stream', {
                method: "POST",
                headers: { "Content-Type": "application/json"},
                body: JSON.stringify({ labelName: localStorage.getItem('labelName') }),
            }).then(response => console.log(response)).catch(error => console.log(error))
        }

        const obtertoken = () => {
            fetch('/get-token-name', {
                headers: {
                        "Content-Type": "application/json",
                    }
            }).then(response => console.log(response)).catch(error => console.log(error))
        }

        async function createToken() {
            const streamName = document.getElementById("streamName").value;
            console.log("createToken", streamName);
            if (streamName == null || streamName.length === 0) return;

            try {
                const fetchResponse = await fetch("/millicast/createToken", {
                    method: "POST",
                    body: JSON.stringify({streamName}),
                    headers: {
                        "Content-Type": "application/json",
                    },
                });
                const response = await fetchResponse.json();
                console.log(response, "response response")

                localStorage.removeItem('labelName');
                // Salvando uma chave-valor no localStorage
                localStorage.setItem('labelName', response.data.label);
                // Set the credentials for the streaming
                const yourPublishingToken = response.data.token; // Token de publicação
                console.log(yourPublishingToken, "response.data.token")
                const yourStreamName = response.data.label; // Nome do stream
                console.log(yourStreamName, "response.data.label")
                // Função assíncrona para publicar o stream
                const startPublishing = async () => {
                    try {
                        // Define callback para gerar novos tokens
                        const tokenGenerator = () => {
                            return millicast.Director.getPublisher({
                                token: yourPublishingToken,
                                streamName: yourStreamName
                            });
                        };

                        // Cria uma nova instância de publicação
                        const millicastPublish = new millicast.Publish(yourStreamName, tokenGenerator);

                        // Obtém a câmera e o microfone do usuário
                        const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });

                        // Anexa a mídia ao elemento de vídeo local (para visualização do publisher)
                        const localVideo = document.createElement('video');
                        localVideo.srcObject = mediaStream;
                        localVideo.autoplay = true;
                        localVideo.muted = true; // Muted para evitar eco
                        document.body.appendChild(localVideo);

                        // Opções de transmissão
                        const broadcastOptions = {
                            mediaStream
                        };

                        // Inicia a transmissão
                        await millicastPublish.connect(broadcastOptions);
                        console.log('Transmissão iniciada com sucesso');
                    } catch (error) {
                        console.error('Erro ao iniciar a transmissão:', error);
                    }
                };
                startPublishing();

            } catch (error) {
                console.error('Erro ao criar o token:', error);
                alert('Connection failed: ' + error.message);
            }
        }
    </script>
</body>
</html> -->