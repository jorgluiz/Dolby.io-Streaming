<!DOCTYPE html>
<html>
<style>
  body {
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    margin: 0;
    padding: 0;
    /* justify-content: space-around; */
    background-color: #f0f0f0;
  }

  video {
    width: 100%;
    margin-top: 30px;
  }

  .createToken {
    background-color: blue;
    color: #f0f0f0;
    cursor: pointer;
    border: none;
    border-radius: 5px;
  }

  .createToken:hover {
    background-color: rgb(22, 22, 212);
    transform: translateY(-2px);
    /* Efeito de movimento para baixo quando pressionado */
    box-shadow: 0 2px #0056b3;
    /* A sombra diminui quando pressionado */
  }

  label {
    display: block;
    text-align: left;
    margin-left: 0;
    /* Se desejar remover qualquer margem */
  }

  .stopLive {
    display: none;
    width: 88px;
    cursor: pointer;
    background-color: red;
    color: #f0f0f0;
    border: none;
    border-radius: 5px;
  }

  .stopLive:hover {
    bottom: 10px;
    background-color: rgb(207, 54, 54);
    transform: translateY(-2px);
    /* Efeito de movimento para baixo quando pressionado */
    box-shadow: 0 2px #0056b3;
    /* A sombra diminui quando pressionado */
  }

  .container {
    display: block;
    margin: 0 auto;
  }

  /* Contêiner principal com borda animada */
  .animated-border {
    position: relative;
    background-color: #fff;
    border-radius: 10px;
    overflow: hidden;
    padding: 20px;
    margin-top: 30px;
    background-color: transparent;
  }

  /* Div para criar a borda animada */
  .animated-border::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 10px;
    padding: 4px;
    /* Espessura da borda */
    background: linear-gradient(35deg, red, orange, yellow, green, blue, indigo, violet, red, orange, yellow, green, blue, indigo, violet, red, orange, yellow, green, blue, indigo, violet, red);
    background-size: 200% 200%;
    animation: borderAnimation 8s linear infinite;
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: destination-out;
    mask-composite: exclude;
  }

  /* Animação da borda em sentido horário contínuo */
  @keyframes borderAnimation {
    0% {
      background-position: 0% 0%;
    }

    100% {
      background-position: 200% 0%;
    }
  }

  /* Conteúdo dentro da div */
  .content {
    position: relative;
    z-index: 1;
    background-color: #fff;
    height: 100%;
    border-radius: 6px;
  }
</style>

<head>
  <title>Dolby.io Real-time Streaming Token API Tutorial - Publisher</title>
  <script src="https://cdn.jsdelivr.net/npm/@millicast/sdk@latest/dist/millicast.umd.js"></script>
</head>

<body>
  <div class="container">
    <label for="streamName">Stream Name</label>
    <input id="streamName" type="text" value="" />
    <button class="createToken" onclick="createToken()">Create Token</button>
    <button class="stopLive" onclick="stopLive()">Stop Live</button>
    <div style="display: flex; flex-direction: column;">
      <!-- <div>
        <button onclick="obtertoken()">OBTERTOKEN</button>
      </div> -->
      <div class="animated-border">
        <div class="content">
          <a id="viewer-url" href=""></a>
        </div>
      </div>
    </div>
  </div>
  <video class="video-stream" controls poster="../images/poster.png"></video>

  <!-- <a id="shareLink" class="links-live" href="http://localhost:8080/live-player" target="_blank">compartilhe linklive</a> -->
  <!-- Contêiner de vídeo com camada preta -->
  <script>
    const accountId = "p9TPVt";
    let millicastPublish;  // Declare millicastPublish in a higher scope

    const obtertoken = () => {
      fetch('/get-token-name', {
        method: 'POST',
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ token: localStorage.getItem('token') })
      }).then(response => console.log(response)).catch(error => console.log(error))
    }

    async function createToken() {
      // Verifica se já existe uma transmissão ativa
      if (localStorage.getItem('activeLiveStream')) {
        alert("Você já possui uma transmissão ativa.");
        return;
      }

      const streamName = document.getElementById("streamName").value;
      if (!streamName) return;

      try {
        const fetchResponse = await fetch("/millicast/createToken", {
          method: "POST",
          body: JSON.stringify({ streamName }),
          headers: { "Content-Type": "application/json" },
        });

        const response = await fetchResponse.json();
        localStorage.setItem("token", response.data.id)
        localStorage.setItem('labelName', response.data.label); // Armazena o labelName no localStorage e atualiza o link de compartilhamento
        localStorage.setItem('activeLiveStream', true); // Salva no localStorage que uma live está ativa
        // Set up and start publishing
        const yourPublishingToken = response.data.token;
        const yourStreamName = response.data.label;

        const startPublishing = async () => {
          try {
            const tokenGenerator = () => millicast.Director.getPublisher({
              token: yourPublishingToken,
              streamName: yourStreamName
            });

            millicastPublish = new millicast.Publish(yourStreamName, tokenGenerator);
            const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });

            const localVideo = document.querySelector('.video-stream');
            localVideo.srcObject = mediaStream;
            localVideo.controls = true;
            localVideo.autoplay = true;
            document.body.appendChild(localVideo);

            await millicastPublish.connect({ mediaStream });
            // Example to playback with the hosted viewer
            // const viewerUrl = `https://dolbyio-streaming-272abf7507d6.herokuapp.com/live-player?streamId=${accountId}/${yourStreamName}`;
            const viewerUrl = `http://localhost:8080/live-player?streamId=${accountId}/${yourStreamName}`;
            document.getElementById('viewer-url').innerHTML = `<a href="${viewerUrl}" target="_new"><strong>link compartilhar live</strong></a>`;

            const stopLive = document.querySelector('.stopLive').style.display = "inline-block";
            console.log('Transmissão iniciada com sucesso');


          } catch (error) {
            console.error('Erro ao iniciar a transmissão:', error);
          }
        };
        startPublishing();

      } catch (error) {
        console.error('Erro ao criar o token:', error);
        alert('Connection failed: ' + error.message);
      }
    }

    // const stopplive = () => {
    //   fetch('/stop-stream', {
    //     method: 'POST',
    //     body: JSON.stringify({ labelName: localStorage.getItem('labelName') })
    //   }).then(response => console.log(response)).catch(error => console.log(error))
    // }

    // Stop the live stream
    const stopLive = () => {
      if (millicastPublish) {
        millicastPublish.stop();  // Stop the live stream
        console.log('Transmissão encerrada');

        // Remover o item do localStorage antes de recarregar a página
        localStorage.removeItem('activeLiveStream');

        // Aguardar um curto período antes de recarregar
        setTimeout(() => {
          location.reload();  // Recarregar a página após a remoção do item
        }, 50);  // 50 ms é um tempo pequeno, suficiente para garantir que a remoção seja processada
      } else {
        console.log('Nenhuma transmissão ativa para parar');
      }
    };

    // Evento de unload (limpeza da transmissão quando a página é fechada)
    window.addEventListener('beforeunload', () => {
      // Remover o item do localStorage antes de recarregar a página
      localStorage.removeItem('activeLiveStream');
    });
  </script>
</body>

</html>


<!-- <!DOCTYPE html>
<html>
<head>
    <title>Dolby.io Real-time Streaming Token API Tutorial - Publisher</title>
    <script src="https://cdn.jsdelivr.net/npm/@millicast/sdk@latest/dist/millicast.umd.js"></script>
</head>
<body>
    <label for="streamName">Stream Name</label>
    <input id="streamName" type="text" value="" />
    <button onclick="stopLive()">stop live</button>
    <button onclick="createToken()">Create Token</button>
    <button onclick="obtertoken()">OBTERTOKEN</button>
    <a class="links-live" href="http://localhost:8080/live-player" target="_blank">compartilhe link live</a>
    <script>
          // Função para adicionar o valor do token ao link de compartilhamento
          function atualizarLinkComToken() {
            const token = localStorage.getItem('labelName');
            console.log(token, "token")
            const link = document.getElementById('shareLink');
            
            // Verifica se o token existe e atualiza o link
            if (token) {
                link.href = `http://localhost:8080/live-player/${token}`;
            }
        }

        // Chamando a função ao carregar a página ou após o token ser definido
        atualizarLinkComToken();

        const stopLive = () => {
            fetch('/stop-stream', {
                method: "POST",
                headers: { "Content-Type": "application/json"},
                body: JSON.stringify({ labelName: localStorage.getItem('labelName') }),
            }).then(response => console.log(response)).catch(error => console.log(error))
        }

        const obtertoken = () => {
            fetch('/get-token-name', {
                headers: {
                        "Content-Type": "application/json",
                    }
            }).then(response => console.log(response)).catch(error => console.log(error))
        }

        async function createToken() {
            const streamName = document.getElementById("streamName").value;
            console.log("createToken", streamName);
            if (streamName == null || streamName.length === 0) return;

            try {
                const fetchResponse = await fetch("/millicast/createToken", {
                    method: "POST",
                    body: JSON.stringify({streamName}),
                    headers: {
                        "Content-Type": "application/json",
                    },
                });
                const response = await fetchResponse.json();
                console.log(response, "response response")

                localStorage.removeItem('labelName');
                // Salvando uma chave-valor no localStorage
                localStorage.setItem('labelName', response.data.label);
                // Set the credentials for the streaming
                const yourPublishingToken = response.data.token; // Token de publicação
                console.log(yourPublishingToken, "response.data.token")
                const yourStreamName = response.data.label; // Nome do stream
                console.log(yourStreamName, "response.data.label")
                // Função assíncrona para publicar o stream
                const startPublishing = async () => {
                    try {
                        // Define callback para gerar novos tokens
                        const tokenGenerator = () => {
                            return millicast.Director.getPublisher({
                                token: yourPublishingToken,
                                streamName: yourStreamName
                            });
                        };

                        // Cria uma nova instância de publicação
                        const millicastPublish = new millicast.Publish(yourStreamName, tokenGenerator);

                        // Obtém a câmera e o microfone do usuário
                        const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });

                        // Anexa a mídia ao elemento de vídeo local (para visualização do publisher)
                        const localVideo = document.createElement('video');
                        localVideo.srcObject = mediaStream;
                        localVideo.autoplay = true;
                        localVideo.muted = true; // Muted para evitar eco
                        document.body.appendChild(localVideo);

                        // Opções de transmissão
                        const broadcastOptions = {
                            mediaStream
                        };

                        // Inicia a transmissão
                        await millicastPublish.connect(broadcastOptions);
                        console.log('Transmissão iniciada com sucesso');
                    } catch (error) {
                        console.error('Erro ao iniciar a transmissão:', error);
                    }
                };
                startPublishing();

            } catch (error) {
                console.error('Erro ao criar o token:', error);
                alert('Connection failed: ' + error.message);
            }
        }
    </script>
</body>
</html> -->